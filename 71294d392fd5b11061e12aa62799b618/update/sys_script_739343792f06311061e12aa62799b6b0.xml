<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_308504_dmv_driver_license_submission</collection>
        <condition>!current.isNewRecord() &amp;&amp; !gs.nil(current.getUniqueValue())</condition>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_308504_dmv_driver_license_submission">stateIN12,11^EQ<item display_value="12,11" endquery="false" field="state" goto="false" newquery="false" operator="IN" or="false" value="12,11"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Calculate Open Duration</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// gs.info("NM In BR Calculate Open Duration");
	var metricDurationNumber = "MTRC0010006";
	var grMD = new GlideRecord("metric_definition");
	if (!grMD.get("number", metricDurationNumber)) return;
	
	var mi = new MetricInstance(grMD, current);
	if (!mi.metricExists()) return;
	// gs.info("NM Found Existing metric");
	
	var gr = new GlideRecord("metric_instance");
	gr.addQuery("id", current.getUniqueValue());
	gr.addQuery("definition", grMD.getUniqueValue());
	gr.addQuery("calculation_complete", false);
	gr.query();
	if (!gr.next()) return;
	// gs.info("NM Found Existing Metric 2");
	
	var gdt = new GlideDateTime();
	var startgdt = new GlideDateTime(gr.start);
	// For the two commented lines below ensure you enter the start time as first parameter and end time as second parameter
	// Otherwise this does not yield desired result
	// var duration = GlideDateTime.subtract(startgdt, gdt); // works
	// var duration = gs.dateDiff(startgdt.getDisplayValue(), gdt.getDisplayValue()); // works
	var duration = new GlideDuration(gdt.getNumericValue() - startgdt.getNumericValue());
	gr.duration = duration;
	gs.info("NM gdt: " + gdt.getDisplayValue());
	gs.info("NM startgdt: " + startgdt.getDisplayValue());
	gs.info("NM Duration: " + duration);
	gr.update();
	

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>nmaharjan</sys_created_by>
        <sys_created_on>2023-10-23 19:09:24</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>739343792f06311061e12aa62799b6b0</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>Calculate Open Duration</sys_name>
        <sys_overrides/>
        <sys_package display_value="DMV" source="x_308504_dmv">71294d392fd5b11061e12aa62799b618</sys_package>
        <sys_policy/>
        <sys_scope display_value="DMV">71294d392fd5b11061e12aa62799b618</sys_scope>
        <sys_update_name>sys_script_739343792f06311061e12aa62799b6b0</sys_update_name>
        <sys_updated_by>nmaharjan</sys_updated_by>
        <sys_updated_on>2023-12-20 18:00:52</sys_updated_on>
        <template/>
        <when>before_display</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=739343792f06311061e12aa62799b6b0"/>
</record_update>
